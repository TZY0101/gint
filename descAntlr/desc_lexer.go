// Code generated from E:/Project/GoProject-Larning/antlr\gint_demo.g4 by ANTLR 4.12.0. DO NOT EDIT.

package desc

import (
	"fmt"
	"sync"
	"unicode"

)

import "github.com/antlr4-go/antlr"

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type descLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var desclexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func desclexerLexerInit() {
	staticData := &desclexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'{'", "'}'", "'('", "')'", "'/'", "':'", "", "", "", "", "", "'byte'",
		"'rune'", "'string'", "'bool'", "", "", "'APIS'", "", "'DTO'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "DATATYPE", "INT", "UINT", "FLOAT", "COMPLEX",
		"BYTE", "RUNE", "STRING", "BOOL", "SLICE", "MAP", "APIS", "METHODS",
		"DTO", "IDENTIFIER", "WS", "NEWLINE",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "DATATYPE", "INT", "UINT",
		"FLOAT", "COMPLEX", "BYTE", "RUNE", "STRING", "BOOL", "SLICE", "MAP",
		"APIS", "METHODS", "DTO", "IDENTIFIER", "WS", "NEWLINE",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 23, 243, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1,
		3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 1, 6, 3, 6, 70, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 94, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 123, 8,
		8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 3, 9, 139, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10,
		1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1,
		10, 1, 10, 1, 10, 3, 10, 160, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3,
		18, 219, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 227, 8,
		20, 10, 20, 12, 20, 230, 9, 20, 1, 21, 4, 21, 233, 8, 21, 11, 21, 12, 21,
		234, 1, 21, 1, 21, 1, 22, 3, 22, 240, 8, 22, 1, 22, 1, 22, 0, 0, 23, 1,
		1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11,
		23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20,
		41, 21, 43, 22, 45, 23, 1, 0, 3, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48,
		57, 65, 90, 95, 95, 97, 122, 2, 0, 9, 9, 32, 32, 267, 0, 1, 1, 0, 0, 0,
		0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0,
		0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0,
		0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0,
		0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1,
		0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41,
		1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 1, 47, 1, 0, 0, 0, 3,
		49, 1, 0, 0, 0, 5, 51, 1, 0, 0, 0, 7, 53, 1, 0, 0, 0, 9, 55, 1, 0, 0, 0,
		11, 57, 1, 0, 0, 0, 13, 69, 1, 0, 0, 0, 15, 93, 1, 0, 0, 0, 17, 122, 1,
		0, 0, 0, 19, 138, 1, 0, 0, 0, 21, 159, 1, 0, 0, 0, 23, 161, 1, 0, 0, 0,
		25, 166, 1, 0, 0, 0, 27, 171, 1, 0, 0, 0, 29, 178, 1, 0, 0, 0, 31, 183,
		1, 0, 0, 0, 33, 188, 1, 0, 0, 0, 35, 197, 1, 0, 0, 0, 37, 218, 1, 0, 0,
		0, 39, 220, 1, 0, 0, 0, 41, 224, 1, 0, 0, 0, 43, 232, 1, 0, 0, 0, 45, 239,
		1, 0, 0, 0, 47, 48, 5, 123, 0, 0, 48, 2, 1, 0, 0, 0, 49, 50, 5, 125, 0,
		0, 50, 4, 1, 0, 0, 0, 51, 52, 5, 40, 0, 0, 52, 6, 1, 0, 0, 0, 53, 54, 5,
		41, 0, 0, 54, 8, 1, 0, 0, 0, 55, 56, 5, 47, 0, 0, 56, 10, 1, 0, 0, 0, 57,
		58, 5, 58, 0, 0, 58, 12, 1, 0, 0, 0, 59, 70, 3, 15, 7, 0, 60, 70, 3, 17,
		8, 0, 61, 70, 3, 19, 9, 0, 62, 70, 3, 21, 10, 0, 63, 70, 3, 23, 11, 0,
		64, 70, 3, 25, 12, 0, 65, 70, 3, 27, 13, 0, 66, 70, 3, 29, 14, 0, 67, 70,
		3, 31, 15, 0, 68, 70, 3, 33, 16, 0, 69, 59, 1, 0, 0, 0, 69, 60, 1, 0, 0,
		0, 69, 61, 1, 0, 0, 0, 69, 62, 1, 0, 0, 0, 69, 63, 1, 0, 0, 0, 69, 64,
		1, 0, 0, 0, 69, 65, 1, 0, 0, 0, 69, 66, 1, 0, 0, 0, 69, 67, 1, 0, 0, 0,
		69, 68, 1, 0, 0, 0, 70, 14, 1, 0, 0, 0, 71, 72, 5, 105, 0, 0, 72, 73, 5,
		110, 0, 0, 73, 94, 5, 116, 0, 0, 74, 75, 5, 105, 0, 0, 75, 76, 5, 110,
		0, 0, 76, 77, 5, 116, 0, 0, 77, 94, 5, 56, 0, 0, 78, 79, 5, 105, 0, 0,
		79, 80, 5, 110, 0, 0, 80, 81, 5, 116, 0, 0, 81, 82, 5, 49, 0, 0, 82, 94,
		5, 54, 0, 0, 83, 84, 5, 105, 0, 0, 84, 85, 5, 110, 0, 0, 85, 86, 5, 116,
		0, 0, 86, 87, 5, 51, 0, 0, 87, 94, 5, 50, 0, 0, 88, 89, 5, 105, 0, 0, 89,
		90, 5, 110, 0, 0, 90, 91, 5, 116, 0, 0, 91, 92, 5, 54, 0, 0, 92, 94, 5,
		52, 0, 0, 93, 71, 1, 0, 0, 0, 93, 74, 1, 0, 0, 0, 93, 78, 1, 0, 0, 0, 93,
		83, 1, 0, 0, 0, 93, 88, 1, 0, 0, 0, 94, 16, 1, 0, 0, 0, 95, 96, 5, 117,
		0, 0, 96, 97, 5, 105, 0, 0, 97, 98, 5, 110, 0, 0, 98, 123, 5, 116, 0, 0,
		99, 100, 5, 117, 0, 0, 100, 101, 5, 105, 0, 0, 101, 102, 5, 110, 0, 0,
		102, 103, 5, 116, 0, 0, 103, 123, 5, 56, 0, 0, 104, 105, 5, 117, 0, 0,
		105, 106, 5, 105, 0, 0, 106, 107, 5, 110, 0, 0, 107, 108, 5, 116, 0, 0,
		108, 109, 5, 49, 0, 0, 109, 123, 5, 54, 0, 0, 110, 111, 5, 117, 0, 0, 111,
		112, 5, 105, 0, 0, 112, 113, 5, 110, 0, 0, 113, 114, 5, 116, 0, 0, 114,
		115, 5, 51, 0, 0, 115, 123, 5, 50, 0, 0, 116, 117, 5, 117, 0, 0, 117, 118,
		5, 105, 0, 0, 118, 119, 5, 110, 0, 0, 119, 120, 5, 116, 0, 0, 120, 121,
		5, 54, 0, 0, 121, 123, 5, 52, 0, 0, 122, 95, 1, 0, 0, 0, 122, 99, 1, 0,
		0, 0, 122, 104, 1, 0, 0, 0, 122, 110, 1, 0, 0, 0, 122, 116, 1, 0, 0, 0,
		123, 18, 1, 0, 0, 0, 124, 125, 5, 102, 0, 0, 125, 126, 5, 108, 0, 0, 126,
		127, 5, 111, 0, 0, 127, 128, 5, 97, 0, 0, 128, 129, 5, 116, 0, 0, 129,
		130, 5, 51, 0, 0, 130, 139, 5, 50, 0, 0, 131, 132, 5, 102, 0, 0, 132, 133,
		5, 108, 0, 0, 133, 134, 5, 111, 0, 0, 134, 135, 5, 97, 0, 0, 135, 136,
		5, 116, 0, 0, 136, 137, 5, 54, 0, 0, 137, 139, 5, 52, 0, 0, 138, 124, 1,
		0, 0, 0, 138, 131, 1, 0, 0, 0, 139, 20, 1, 0, 0, 0, 140, 141, 5, 99, 0,
		0, 141, 142, 5, 111, 0, 0, 142, 143, 5, 109, 0, 0, 143, 144, 5, 112, 0,
		0, 144, 145, 5, 108, 0, 0, 145, 146, 5, 101, 0, 0, 146, 147, 5, 120, 0,
		0, 147, 148, 5, 54, 0, 0, 148, 160, 5, 52, 0, 0, 149, 150, 5, 99, 0, 0,
		150, 151, 5, 111, 0, 0, 151, 152, 5, 109, 0, 0, 152, 153, 5, 112, 0, 0,
		153, 154, 5, 108, 0, 0, 154, 155, 5, 101, 0, 0, 155, 156, 5, 120, 0, 0,
		156, 157, 5, 49, 0, 0, 157, 158, 5, 50, 0, 0, 158, 160, 5, 56, 0, 0, 159,
		140, 1, 0, 0, 0, 159, 149, 1, 0, 0, 0, 160, 22, 1, 0, 0, 0, 161, 162, 5,
		98, 0, 0, 162, 163, 5, 121, 0, 0, 163, 164, 5, 116, 0, 0, 164, 165, 5,
		101, 0, 0, 165, 24, 1, 0, 0, 0, 166, 167, 5, 114, 0, 0, 167, 168, 5, 117,
		0, 0, 168, 169, 5, 110, 0, 0, 169, 170, 5, 101, 0, 0, 170, 26, 1, 0, 0,
		0, 171, 172, 5, 115, 0, 0, 172, 173, 5, 116, 0, 0, 173, 174, 5, 114, 0,
		0, 174, 175, 5, 105, 0, 0, 175, 176, 5, 110, 0, 0, 176, 177, 5, 103, 0,
		0, 177, 28, 1, 0, 0, 0, 178, 179, 5, 98, 0, 0, 179, 180, 5, 111, 0, 0,
		180, 181, 5, 111, 0, 0, 181, 182, 5, 108, 0, 0, 182, 30, 1, 0, 0, 0, 183,
		184, 5, 91, 0, 0, 184, 185, 5, 93, 0, 0, 185, 186, 1, 0, 0, 0, 186, 187,
		3, 13, 6, 0, 187, 32, 1, 0, 0, 0, 188, 189, 5, 109, 0, 0, 189, 190, 5,
		97, 0, 0, 190, 191, 5, 112, 0, 0, 191, 192, 1, 0, 0, 0, 192, 193, 5, 91,
		0, 0, 193, 194, 3, 13, 6, 0, 194, 195, 5, 93, 0, 0, 195, 196, 3, 13, 6,
		0, 196, 34, 1, 0, 0, 0, 197, 198, 5, 65, 0, 0, 198, 199, 5, 80, 0, 0, 199,
		200, 5, 73, 0, 0, 200, 201, 5, 83, 0, 0, 201, 36, 1, 0, 0, 0, 202, 203,
		5, 103, 0, 0, 203, 204, 5, 101, 0, 0, 204, 219, 5, 116, 0, 0, 205, 206,
		5, 112, 0, 0, 206, 207, 5, 117, 0, 0, 207, 219, 5, 116, 0, 0, 208, 209,
		5, 112, 0, 0, 209, 210, 5, 111, 0, 0, 210, 211, 5, 115, 0, 0, 211, 219,
		5, 116, 0, 0, 212, 213, 5, 100, 0, 0, 213, 214, 5, 101, 0, 0, 214, 215,
		5, 108, 0, 0, 215, 216, 5, 101, 0, 0, 216, 217, 5, 116, 0, 0, 217, 219,
		5, 101, 0, 0, 218, 202, 1, 0, 0, 0, 218, 205, 1, 0, 0, 0, 218, 208, 1,
		0, 0, 0, 218, 212, 1, 0, 0, 0, 219, 38, 1, 0, 0, 0, 220, 221, 5, 68, 0,
		0, 221, 222, 5, 84, 0, 0, 222, 223, 5, 79, 0, 0, 223, 40, 1, 0, 0, 0, 224,
		228, 7, 0, 0, 0, 225, 227, 7, 1, 0, 0, 226, 225, 1, 0, 0, 0, 227, 230,
		1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 42, 1, 0,
		0, 0, 230, 228, 1, 0, 0, 0, 231, 233, 7, 2, 0, 0, 232, 231, 1, 0, 0, 0,
		233, 234, 1, 0, 0, 0, 234, 232, 1, 0, 0, 0, 234, 235, 1, 0, 0, 0, 235,
		236, 1, 0, 0, 0, 236, 237, 6, 21, 0, 0, 237, 44, 1, 0, 0, 0, 238, 240,
		5, 13, 0, 0, 239, 238, 1, 0, 0, 0, 239, 240, 1, 0, 0, 0, 240, 241, 1, 0,
		0, 0, 241, 242, 5, 10, 0, 0, 242, 46, 1, 0, 0, 0, 10, 0, 69, 93, 122, 138,
		159, 218, 228, 234, 239, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// descLexerInit initializes any static state used to implement descLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewdescLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func DescLexerInit() {
	staticData := &desclexerLexerStaticData
	staticData.once.Do(desclexerLexerInit)
}

// NewdescLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewdescLexer(input antlr.CharStream) *descLexer {
	DescLexerInit()
	l := new(descLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &desclexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "gint_demo.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// descLexer tokens.
const (
	descLexerT__0       = 1
	descLexerT__1       = 2
	descLexerT__2       = 3
	descLexerT__3       = 4
	descLexerT__4       = 5
	descLexerT__5       = 6
	descLexerDATATYPE   = 7
	descLexerINT        = 8
	descLexerUINT       = 9
	descLexerFLOAT      = 10
	descLexerCOMPLEX    = 11
	descLexerBYTE       = 12
	descLexerRUNE       = 13
	descLexerSTRING     = 14
	descLexerBOOL       = 15
	descLexerSLICE      = 16
	descLexerMAP        = 17
	descLexerAPIS       = 18
	descLexerMETHODS    = 19
	descLexerDTO        = 20
	descLexerIDENTIFIER = 21
	descLexerWS         = 22
	descLexerNEWLINE    = 23
)
